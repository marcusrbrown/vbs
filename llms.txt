# VBS (View By Stardate)

> A modern, local-first Star Trek chronological viewing guide that helps fans track their progress through all series and movies in chronological order by in-universe stardate.

VBS is built with TypeScript and Vite using functional factory patterns with closures for state management. The application features a comprehensive dataset spanning 7 chronological eras from the 22nd-32nd centuries (1,000+ years of Star Trek history), with persistent progress tracking using browser LocalStorage and planned migration to IndexedDB.

The architecture emphasizes type safety through advanced TypeScript generics, generic EventEmitter systems for inter-module communication, and modern ES modules. All viewing progress is stored locally with export/import capabilities for data portability.

## Documentation

- [Main README](readme.md): Complete project overview, features, quick start guide, and development workflow
- [Viewing Guide](viewing-guide.md): Comprehensive Star Trek chronological viewing guide by stardate with detailed continuity notes
- [Copilot Instructions](.github/copilot-instructions.md): Detailed development guidelines, architecture patterns, and coding conventions for the project

## Architecture & Examples

- [Generic Types Examples](docs/generic-types-examples.md): Comprehensive examples of the generic TypeScript system with EventEmitters and storage utilities
- [Composition Examples](docs/composition-examples.md): Real-world functional composition patterns and utilities usage throughout VBS
- [IndexedDB Migration Plan](docs/indexeddb-migration.md): Technical specification for planned migration from LocalStorage to IndexedDB
- [Metadata Storage Integration](docs/metadata-storage-integration.md): Architecture and implementation details for metadata enrichment and caching systems
- [Settings Architecture](docs/settings-architecture.md): Design specification for user preferences and settings management system

## Core Implementation

- [Main Application](src/main.ts): Primary application factory coordinating all modules and DOM interactions
- [Star Trek Data](src/data/star-trek-data.ts): Comprehensive 570-line dataset covering all Star Trek content across 7 chronological eras
- [Timeline Events](src/data/timeline-events.ts): Chronological timeline data for major galactic events and plot points
- [Progress Tracker](src/modules/progress.ts): Factory managing watched items state with generic EventEmitter integration
- [Episode Tracker](src/modules/episode-tracker.ts): Factory for episode-level progress tracking with type-safe event handling
- [Episodes Manager](src/modules/episodes.ts): Episode management factory with functional composition utilities integration
- [Progress Validation](src/modules/progress-validation.ts): Validation and error recovery utilities for episode progress data integrity
- [Migration Utilities](src/modules/migration.ts): Data migration system for version upgrades and schema evolution
- [Conflict Resolution](src/modules/conflict-resolution.ts): Utilities for handling data conflicts during synchronization and merges
- [Cache Warming](src/modules/cache-warming.ts): Proactive caching utilities for metadata and content preloading
- [Search Filter](src/modules/search.ts): Real-time search and filtering factory with type-safe events
- [Timeline Renderer](src/modules/timeline.ts): Era-based timeline rendering with dependency injection
- [Timeline Visualization](src/modules/timeline-viz.ts): Interactive timeline visualization system with D3.js integration
- [User Preferences](src/modules/preferences.ts): Settings management for themes, display options, and user configurations
- [Settings Manager](src/modules/settings-manager.ts): Centralized settings coordination with validation, persistence, and UI synchronization
- [Theme System](src/modules/themes.ts): Dark/light theme management with CSS custom properties and auto-detection
- [Streaming API](src/modules/streaming-api.ts): Integration utilities for streaming service availability and content discovery
- [Metadata Sources](src/modules/metadata-sources.ts): External API integration for episode metadata enrichment
- [Metadata Storage](src/modules/metadata-storage.ts): Persistent storage layer for cached episode metadata
- [Metadata Queue](src/modules/metadata-queue.ts): Request queue management for metadata fetching operations
- [Metadata Scheduler](src/modules/metadata-scheduler.ts): Background scheduling system for metadata updates
- [Metadata Quality](src/modules/metadata-quality.ts): Quality validation and confidence scoring for metadata
- [External API Types](src/modules/external-api-types.ts): TypeScript types for external metadata provider APIs
- [Metadata Sources Config](src/data/metadata-sources-config.ts): Configuration for metadata provider endpoints and rate limits
- [Version Manager](src/modules/version-manager.ts): Application version management and feature compatibility tracking
- [Storage Utilities](src/modules/storage.ts): Generic storage adapters with validation and export/import functionality
- [Type Definitions](src/modules/types.ts): Comprehensive TypeScript interfaces and utility types
- [Event System](src/modules/events.ts): Generic EventEmitter factory for type-safe inter-module communication
- [Logger](src/modules/logger.ts): Configurable logging system with levels, filtering, metrics, and persistence capabilities
- [Error Handler](src/modules/error-handler.ts): Centralized error management, logging, and user-friendly error reporting
- [Composition Utilities](src/utils/composition.ts): Functional composition utilities with pipe(), compose(), curry(), and tap() functions
- [Download Utilities](src/utils/download.ts): Client-side file download helpers for data export and backup operations
- [Geographic Utilities](src/utils/geographic.ts): Location-based utilities for regional content availability and localization
- [Metadata Validation](src/utils/metadata-validation.ts): Validation schemas and utilities for metadata quality assurance
- [Utility Index](src/utils/index.ts): Centralized exports for all utility functions and helpers

## Components

- [Migration Progress](src/components/migration-progress.ts): Progress indicator component for data migration operations
- [Streaming Indicators](src/components/streaming-indicators.ts): UI components showing streaming service availability
- [Streaming Preferences](src/components/streaming-preferences.ts): User interface for streaming service preference configuration
- [Timeline Controls](src/components/timeline-controls.ts): Interactive controls for timeline navigation and filtering
- [Metadata Debug Panel](src/components/metadata-debug-panel.ts): Developer tool for inspecting and debugging metadata operations
- [Metadata Expert Mode](src/components/metadata-expert-mode.ts): Advanced metadata management interface for power users
- [Metadata Preferences](src/components/metadata-preferences.ts): User interface for configuring metadata enrichment preferences
- [Metadata Quality Indicator](src/components/metadata-quality-indicator.ts): Visual indicator for metadata completeness and quality scores
- [Metadata Source Attribution](src/components/metadata-source-attribution.ts): Display component for metadata source attribution and licensing
- [Metadata Sync Status](src/components/metadata-sync-status.ts): Real-time synchronization status indicator for metadata operations
- [Metadata Usage Controls](src/components/metadata-usage-controls.ts): UI controls for managing metadata fetching and caching behavior
- [Component Styles](src/components/): CSS files for component styling and responsive design patterns

## Configuration & Development

- [Package Configuration](package.json): Dependencies, scripts, and project metadata with pnpm workspace setup
- [Vite Configuration](vite.config.ts): Build system configuration with GitHub Pages deployment settings
- [TypeScript Configuration](tsconfig.json): Strict TypeScript compiler settings with modern ES modules
- [ESLint Configuration](eslint.config.ts): Code quality and formatting rules with automated pre-commit hooks
- [Markdown Linting](.markdownlint-cli2.yaml): Markdown formatting and style enforcement configuration

## Planning & Development

- [Feature Prompts](.ai/notes/feature-prompts.md): Collection of detailed feature development prompts and implementation ideas
- [Episode Tracking Feature Plan](.ai/plan/feature-episode-tracking-1.md): Detailed specification for individual episode progress tracking
- [Episode Metadata Enrichment Plan](.ai/plan/feature-episode-metadata-enrichment-1.md): Technical specification for external metadata integration and enrichment
- [Advanced Visualization Plan](.ai/plan/feature-advanced-visualization-1.md): Technical roadmap for D3.js timeline visualization features
- [Automated Data Generation Plan](.ai/plan/feature-automated-data-generation-1.md): Strategy for automated generation and validation of Star Trek episode data
- [Responsive UI Testing Plan](.ai/plan/feature-responsive-ui-testing-1.md): Strategy for cross-device and accessibility testing automation
- [Functional Composition Plan](.ai/plan/feature-functional-composition-1.md): Architecture specification for functional programming utilities
- [Git Pre-commit Hooks Plan](.ai/plan/process-git-precommit-hooks-1.md): Implementation plan for automated code quality enforcement
- [Production Readiness Infrastructure](.ai/plan/infrastructure-production-readiness-1.md): Comprehensive plan for production deployment readiness
- [ESLint Remediation Refactor](.ai/plan/refactor-eslint-remediation-1.md): Plan for upgrading and fixing ESLint configuration issues
- [Generic Types Refactor Plan](.ai/plan/refactor-generic-types-1.md): Specification for enhanced type safety through generic TypeScript patterns
- [Functional Factory Refactor Plan](.ai/plan/refactor-modules-functional-1.md): Migration plan from class-based to functional factory architecture
- [Settings Management Refactor](.ai/plan/refactor-settings-management-1.md): Plan for consolidating and modernizing user settings and preferences architecture

## Optional

- [Application Entry Point](index.html): HTML template with Star Trek-themed styling and meta tags
- [Global Styles](src/style.css): CSS with Star Trek color theme and responsive design patterns
- [Test Coverage Reports](coverage/): Generated test coverage reports and visualization
- [GitHub Workflows](.github/workflows/): CI/CD automation for testing and deployment
- [Development Environment](src/vite-env.d.ts): Vite type definitions for development
